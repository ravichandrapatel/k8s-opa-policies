apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spspblockprivilegedports
  annotations:
    metadata.gatekeeper.sh/title: "Block Privileged Ports"
    metadata.gatekeeper.sh/description: "Blocks containers from using privileged ports (port numbers below 1024)."
    metadata.gatekeeper.sh/version: "1.0.1"
spec:
  crd:
    spec:
      names:
        kind: k8sPSPBlockPrivilegedPorts
      validation:
        openAPIV3Schema:
          type: object
          properties:
            parameters:
              type: object
              properties:
                exemptImages:
                  description: >-
                    Any container that uses an image that matches an entry in this list will be excluded
                    from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.

                    It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                    in order to avoid unexpectedly exempting images from an untrusted repository.
                  type: array
                  items:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spspblockprivilegedports

        import data.lib.exclude_update.is_update
        import data.lib.exempt_container.is_exempt_image

        violation[{"msg": msg, "details": {}}] {
            # Check if the review operation is an update
            not is_update(input.review)

            # Check if any container port is below 1024
            input_containers[container]
            container.ports[_].containerPort < 1024

            # Check if the container image is exempted
            not is_exempt_image(container.image)

            msg := sprintf("Containers using privileged ports (port numbers below 1024) are not allowed, pod: %v, container: %v", [input.review.object.metadata.name, container.name])
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
            c := input.review.object.spec.ephemeralContainers[_]
        }

        # Helper function to check if the review is an update
        is_update(review) {
            review.operation == "UPDATE"
        }
      libs:
        - |
          package lib.exclude_update

          is_update(review) {
              review.operation == "UPDATE"
          }
        - |
          package lib.exempt_container

          is_exempt_image(image) {
              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
              img := image
              exemption := exempt_images[_]
              _matches_exemption(img, exemption)
          }

          _matches_exemption(img, exemption) {
              not endswith(exemption, "*")
              exemption == img
          }

          _matches_exemption(img, exemption) {
              endswith(exemption, "*")
              prefix := trim_suffix(exemption, "*")
              startswith(img, prefix)
          }
